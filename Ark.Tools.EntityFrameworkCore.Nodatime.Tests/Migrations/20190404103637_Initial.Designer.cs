// <auto-generated />
using System;
using Ark.Tools.EntityFrameworkCore.Nodatime.Tests;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;

namespace Ark.Tools.EntityFrameworkCore.Nodatime.Tests.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190404103637_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("EntityAs");
                });

            modelBuilder.Entity("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<DateTimeOffset>("DateTimeOffset");

                    b.Property<Instant>("Instant");

                    b.Property<LocalDate>("LocalDate");

                    b.Property<LocalDateTime>("LocalDateTime");

                    b.Property<OffsetDateTime>("OffsetDateTime");

                    b.Property<TimeSpan>("TimeSpan");

                    b.HasKey("Id");

                    b.ToTable("EntityBs");
                });

            modelBuilder.Entity("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityA", b =>
                {
                    b.OwnsMany("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("EntityAId");

                            b1.Property<int>("Id");

                            b1.Property<string>("City");

                            b1.Property<string>("Street");

                            b1.HasKey("EntityAId", "Id");

                            b1.ToTable("EntityAs_Addresses");

                            b1.HasOne("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityA")
                                .WithMany("Addresses")
                                .HasForeignKey("EntityAId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityB", b =>
                {
                    b.OwnsOne("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.Address", "Address", b1 =>
                        {
                            b1.Property<int>("EntityBId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City");

                            b1.Property<string>("Street");

                            b1.HasKey("EntityBId");

                            b1.ToTable("EntityBs");

                            b1.HasOne("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.EntityB")
                                .WithOne("Address")
                                .HasForeignKey("Ark.Tools.EntityFrameworkCore.Nodatime.Tests.Address", "EntityBId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
