parameters:
  - name: name
    type: string
  - name: dependsOn
    type: string
    default: ''
  - name: projectName
    type: string
  - name: serviceName
    type: string
  - name: vmImageName
    type: string
  - name: environmentName
    type: string
  - name: subscription
    type: string
  - name: resourceGroup
    type: string
  - name: deploymentNamePrefix
    type: string
  - name: appServiceArmOutputVariable
    type: string
  - name: dbArmOutputVariable
    type: string
  - name: BuildConfiguration
    type: string
  - name: 'additionalVariables'
    type: object
    default: {}
  
  
stages:
  - stage: ${{ parameters.name }} 
    displayName: ${{ parameters.name }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      serviceName: ${{ parameters.serviceName }}
      webInterfaceProject: '${{ parameters.projectName }}.${{ parameters.serviceName }}.WebInterface'
      databaseProject: '${{ parameters.projectName }}.${{ parameters.serviceName }}.Database'
      resourceGroup: ${{ parameters.resourceGroup }}
      subscription: ${{ parameters.subscription }}
      deploymentNamePrefix: ${{ parameters.deploymentNamePrefix }}
      appServiceArmOutputVariable: ${{ parameters.appServiceArmVariable }}
      dbArmOutputVariable: ${{ parameters.dbArmOutputVariable }}
    jobs:
    - deployment: '${{ parameters.name }}_Deploy'
      displayName: '${{ parameters.name }} Deploy'
      environment: ${{ parameters.environmentName }}
      pool:
        vmImage: ${{ parameters.vmImageName }}
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ARM Outputs@6
              displayName: 'ARM Outputs'
              inputs:
                ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                ConnectedServiceNameARM: '${{ variables.subscription }}'
                resourceGroupName: ${{ variables.resourceGroup }}
                prefix: 'arm.'
                whenLastDeploymentIsFailed: 'latestSuccesful'
                deploymentNameFilter: '${{ variables.deploymentNamePrefix }}*'
            - task: AzureAppServiceManage@0
              displayName: 'Stop Azure App Service: $(arm.${{ variables.appServiceArmName }})'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                Action: 'Stop Azure App Service'
                WebAppName: '$(arm.${{ variables.appServiceArmName }})'
            
            - task: AzureCLI@2
              displayName: 'Install SqlServer Module'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  Install-Module -Name SqlServer -Force -Scope CurrentUser

            - task: AzureCLI@2
              displayName: 'Pre Migrations'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: >
                    Invoke-Sqlcmd 
                        -ServerInstance '$(arm.SQLServerFQDN)' 
                        -Database '$(arm.ASTEDBName)' 
                        -Username '$(arm.AdminLogin)' 
                        -Password '$(arm.AdminPassword)' 
                        -InputFile '$(Pipeline.Workspace)/drop/${{ variables.service }}/${{ variables.databaseProject }}/RunMigration.PreDeployment.sql'
                        -Variable 'MyPath = $(Pipeline.Workspace)/drop/${{ variables.serviceName }}/${{ variables.databaseProject }}/'
                        -QueryTimeout 360
            
            - task: AzureCLI@2
              displayName: 'DacPac'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: >
                    sqlpackage /Action:Publish 
                    /SourceFile:"$(Pipeline.Workspace)/drop/${{ variables.service }}/${{ variables.databaseProject }}/${{ variables.databaseProject }}.dacpac" 
                    /TargetServerName:$(arm.SQLServerFQDN) 
                    /TargetDatabaseName:$(arm.ASTEDBName) 
                    /TargetUser:$(arm.AdminLogin) 
                    /TargetPassword:$(arm.AdminPassword) 
                    /Profile:"$(Pipeline.Workspace)/drop/${{ variables.service }}/${{ variables.databaseProject }}/${{ variables.databaseProject }}.publish.xml"

            - task: AzureRmWebAppDeployment@4
              displayName: 'Azure App Service Deploy: $(arm.${{ variables.appServiceArmName }})'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                WebAppName: $(arm.${{ variables.appServiceArmName }})
                packageForLinux: '$(Pipeline.Workspace)/drop/${{ variables.serviceName }}/${{ variables.webInterfaceProject }}/${{variables.webInterfaceProject }}.zip'
                enableCustomDeployment: true
                DeploymentType: zipDeploy
            - task: AzureAppServiceManage@0
              displayName: 'Start Azure App Service: $(arm.${{ variables.appServiceArmName }})'
              inputs:
                azureSubscription: '${{ variables.subscription }}'
                Action: 'Start Azure App Service'
                WebAppName: '$(arm.${{ variables.appServiceArmName }})'
            - task: OneLuckiDev.release-web-smoke-test-task.vsts-release-web-test.oneluckidevWebSmokeTest@1
              displayName: 'Web Smoke Test'
              inputs:
                url: 'https://$(arm.${{ variables.appServiceArmName }}).azurewebsites.net/swagger'
                retryAttemptCount: 10
                retryDelay: 5000
