parameters:
  - name: name
    type: string
  - name: dependsOn
    type: string
    default: ''
  - name: projectName
    type: string
  - name: serviceName
    type: string
  - name: vmImageName
    type: string
  - name: BuildConfiguration
    type: string
  - name: 'additionalVariables'
    type: object
    default: {}
  
  
stages:
  - stage: ${{ parameters.name }}
    displayName: ${{ parameters.name }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      serviceName: ${{ parameters.serviceName }}
      projectName: ${{ parameters.projectName }}
      solutionPath: '${{ parameters.projectName }}.sln'
      webInterfaceProject: '${{ parameters.projectName }}.${{ parameters.serviceName }}.WebInterface'
      databaseProject: '${{ parameters.projectName }}.${{ parameters.serviceName }}.Database'
      servicePath: '$(Build.SourcesDirectory)/${{ parameters.serviceName }}'
      BuildConfiguration: ${{ parameters.BuildConfiguration }}
      ${{ insert }}: ${{ parameters.additionalVariables }}
    jobs:
    - job: '${{ parameters.name }} Job'
      timeoutInMinutes: 60 # how long to run the job before automatically cancelling
      cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
      pool:
        vmImage: ${{ parameters.vmImageName }}
      variables:
        NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget/packages
      services:
        azurite:
          image: mcr.microsoft.com/azure-storage/azurite:latest
          ports:
          - 10000:10000
          - 10001:10001
          - 10002:10002
        sqlserver:
          image: mcr.microsoft.com/mssql/server:2022-latest
          env:
            SA_PASSWORD: "SpecFlowLocalDbPassword85!"
            ACCEPT_EULA: "Y"
          ports:
          - 1433:1433
      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet 6.x'
        inputs:
          versionSpec: 6.x

      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          useGlobalJson: true

      - task: Cache@2
        displayName: Cache NuGet
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
          path: '$(NUGET_PACKAGES)'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          cacheHitVar: 'CACHE_RESTORED'

      - task: NuGetCommand@2
        condition: ne(variables.CACHE_RESTORED, true)
        displayName: 'NuGet restore'
        inputs:
          command: 'restore'
          restoreSolution: ${{ variables.solutionPath }}

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: ${{ variables.solutionPath }}

      - task: DotNetCoreCLI@2
        displayName: 'Build solution'
        inputs:
          command: 'build'
          projects: ${{ variables.solutionPath }}
          arguments: '--configuration $(BuildConfiguration)  --no-restore'

      - task: DotNetCoreCLI@2
        displayName: 'Build solution again (for dacpac)'
        inputs:
          command: 'build'
          projects: ${{ variables.solutionPath }}
          arguments: '--configuration $(BuildConfiguration)  --no-restore'

      - task: DotNetCoreCLI@2
        displayName: 'Run tests'
        inputs:
          command: 'test'
          projects: ${{ variables.solutionPath }}
          arguments: '--logger "trx" --blame --blame-crash --blame-hang --blame-hang-timeout 10m --settings "./CodeCoverage.runsettings" --no-build --no-restore'
          configuration: $(BuildConfiguration)

      - task: CopyFiles@2
        displayName: 'Copy SQL Files'
        inputs:
          SourceFolder: '$(build.sourcesdirectory)/${{ variables.serviceName }}/${{ variables.databaseProject }}'
          Contents: |
           **/*.dacpac
           **/*.publish.xml
           **/_Migrations/**/*.sql
          TargetFolder: '$(build.artifactstagingdirectory)/${{ variables.serviceName }}/${{ variables.databaseProject }}'
          flattenFolders: true

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish'
        inputs:
          command: publish
          publishWebProjects: false
          projects: '$(build.sourcesdirectory)/${{ variables.serviceName }}/${{ variables.webInterfaceProject }}/${{ variables.webInterfaceProject }}.csproj'
          arguments: '-o "$(build.artifactstagingdirectory)/${{ variables.serviceName }}/${{ variables.webInterfaceProject }}" --configuration $(BuildConfiguration) --no-build  --no-restore'

      - task: PublishSymbols@2
        displayName: 'Publish symbols path'
        inputs:
          SymbolServerType: TeamServices

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
